//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Ocelli.OpenClickBank.Tests")]
namespace Ocelli.OpenClickBank
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAnalyticsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the status & last update time of the API.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnalyticStatus?> GetStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions completing in the next 30 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCompletingIn30DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions completing in the next 60 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCompletingIn60DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions canceled in the last 30 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCanceledLast30DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions canceled in the last 60 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCanceledLast60DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the subscription start date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest subscription start date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest subscription start date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByStartDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the subscription canceled date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest subscription cancellation date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest subscription cancellation date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByCancelDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the next payment date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest next subscription payment date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest next subscription payment date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByNextPaymentDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="status">The subscription status.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByStatusDateAsync(RoleAccount role, string account, SubscriptionStatus status, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions details.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns statistical summations of data for subscriptions.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The start date (inclusive) of the time frame to report on - format is yyyy-MM-dd.</param>
        /// <param name="endDate">The end date (inclusive) of the time frame to report on - format is yyyy-MM-dd.</param>
        /// <param name="groupBy">You may group by business date by passing DATE as the value.</param>
        /// <param name="productId">The product id to report on, multiple parameter/value pairs may be passed.</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<SubscriptionTrendsData?>> GetSubscriptionTrendsAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, string? groupBy = null, int? productId = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns statistical data for a given role and dimension.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="dimension">PRODUCT_SKU – Only available if role = VENDOR
        /// <br/>VENDOR_PRODUCT_SKU – Only available if role = AFFILIATE</param>
        /// <param name="account">Account/site to query for.</param>
        /// <param name="startDate">The start date of the time frame to report on - format is yyyy-MM-dd. Defaults to the previous day.</param>
        /// <param name="endDate">The end date of the time frame to report on - format is yyyy-MM-dd. Defaults to the current day.</param>
        /// <param name="dimensionFilter">This parameter limits the results returned to ones with a matching dimension id. This value is case sensitive.</param>
        /// <param name="select">This optional parameter specifies the data fields to return. Multiple select parameters may be passed to select multiple values. If this parameter is absent all values will be returned.</param>
        /// <param name="orderBy">This optional parameter specifies which data field the results should be ordered by.</param>
        /// <param name="sortAscending">When an order by is included this may be specified with a value of true to sort ascending instead of descending</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ClickBankResponse<AnalyticsResult?>> GetStatisticsByRoleAndDimensionAsync(RoleAccount role, Dimension dimension, string account, DateOnly? startDate = null, DateOnly? endDate = null, Dimension? dimensionFilter = null, System.Collections.Generic.IEnumerable<DimensionColumn>? select = null, DimensionColumn? orderBy = null, bool? sortAscending = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns summary statistical data for a given role, dimension, and summary type.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="dimension">PRODUCT_SKU – Only available if role = VENDOR
        /// <br/>VENDOR_PRODUCT_SKU – Only available if role = AFFILIATE</param>
        /// <param name="account">Account/site to query for.</param>
        /// <param name="summaryType">This parameter specifies which type of summary data is desired.
        /// <br/>VENDOR_ONLY - this shows summary information for only the selected account
        /// <br/>AFFILIATE_ONLY - this shows summary information which excludes the selected account</param>
        /// <param name="startDate">The start date of the time frame to report on - format is yyyy-MM-dd. Defaults to the previous day.</param>
        /// <param name="endDate">The end date of the time frame to report on - format is yyyy-MM-dd. Defaults to the current day.</param>
        /// <param name="dimensionFilter">This parameter limits the results returned to ones with a matching dimension id. This value is case sensitive.</param>
        /// <param name="select">This optional parameter specifies the data fields to return. Multiple select parameters may be passed to select multiple values. If this parameter is absent all values will be returned.</param>
        /// <param name="orderBy">This optional parameter specifies which data field the results should be ordered by.</param>
        /// <param name="sortAscending">When an order by is included this may be specified with a value of true to sort ascending instead of descending</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ClickBankResponse<AnalyticsResult?>> GetStatisticsByRoleAndDimensionSummaryAsync(RoleAccount role, Dimension dimension, string account, SummaryType summaryType, DateOnly? startDate = null, DateOnly? endDate = null, Dimension? dimensionFilter = null, System.Collections.Generic.IEnumerable<DimensionColumn>? select = null, DimensionColumn? orderBy = null, bool? sortAscending = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class AnalyticsClient : ClickBankClientBase, IAnalyticsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AnalyticsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the status & last update time of the API.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AnalyticStatus?> GetStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/status"
                    urlBuilder_.Append("rest/1.3/analytics/status");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticStatus?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions completing in the next 30 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCompletingIn30DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/compthirty"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/compthirty");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions completing in the next 60 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCompletingIn60DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/compsixty"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/compsixty");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions canceled in the last 30 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCanceledLast30DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/cancelthirty"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/cancelthirty");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions canceled in the last 60 days.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsCanceledLast60DaysAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/cancelsixty"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/cancelsixty");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the subscription start date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest subscription start date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest subscription start date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByStartDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/startdate"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/startdate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the subscription canceled date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest subscription cancellation date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest subscription cancellation date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByCancelDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/canceldate"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/canceldate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions where the next payment date is between (inclusive) the startDate and endDate parameters.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The earliest next subscription payment date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="endDate">The latest next subscription payment date the result list will contain. Date Format: yyyy-MM-dd.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByNextPaymentDateAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/nextpmtdate"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/nextpmtdate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="status">The subscription status.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsByStatusDateAsync(RoleAccount role, string account, SubscriptionStatus status, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details/status"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details/status");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of subscriptions details.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="orderBy">Customer details are only available to vendors.</param>
        /// <param name="sortDirection">The order in which the sorted results are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDetailResult?> GetSubscriptionDetailsAsync(RoleAccount role, string account, SubscriptionDetailRowOrderBy? orderBy = null, SortDirection? sortDirection = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/details"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/details");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDetailResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns statistical summations of data for subscriptions.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="account">The account nickname/site.</param>
        /// <param name="startDate">The start date (inclusive) of the time frame to report on - format is yyyy-MM-dd.</param>
        /// <param name="endDate">The end date (inclusive) of the time frame to report on - format is yyyy-MM-dd.</param>
        /// <param name="groupBy">You may group by business date by passing DATE as the value.</param>
        /// <param name="productId">The product id to report on, multiple parameter/value pairs may be passed.</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<SubscriptionTrendsData?>> GetSubscriptionTrendsAsync(RoleAccount role, string account, DateOnly startDate, DateOnly endDate, string? groupBy = null, int? productId = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/subscription/trends"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscription/trends");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (groupBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(groupBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (productId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("productId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionTrendsData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<SubscriptionTrendsData?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionTrendsData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<SubscriptionTrendsData?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns statistical data for a given role and dimension.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="dimension">PRODUCT_SKU – Only available if role = VENDOR
        /// <br/>VENDOR_PRODUCT_SKU – Only available if role = AFFILIATE</param>
        /// <param name="account">Account/site to query for.</param>
        /// <param name="startDate">The start date of the time frame to report on - format is yyyy-MM-dd. Defaults to the previous day.</param>
        /// <param name="endDate">The end date of the time frame to report on - format is yyyy-MM-dd. Defaults to the current day.</param>
        /// <param name="dimensionFilter">This parameter limits the results returned to ones with a matching dimension id. This value is case sensitive.</param>
        /// <param name="select">This optional parameter specifies the data fields to return. Multiple select parameters may be passed to select multiple values. If this parameter is absent all values will be returned.</param>
        /// <param name="orderBy">This optional parameter specifies which data field the results should be ordered by.</param>
        /// <param name="sortAscending">When an order by is included this may be specified with a value of true to sort ascending instead of descending</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<AnalyticsResult?>> GetStatisticsByRoleAndDimensionAsync(RoleAccount role, Dimension dimension, string account, DateOnly? startDate = null, DateOnly? endDate = null, Dimension? dimensionFilter = null, System.Collections.Generic.IEnumerable<DimensionColumn>? select = null, DimensionColumn? orderBy = null, bool? sortAscending = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (dimension == null)
                throw new System.ArgumentNullException("dimension");

            if (account == null)
                throw new System.ArgumentNullException("account");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/{dimension}"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(dimension, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dimensionFilter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dimensionFilter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dimensionFilter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        foreach (var item_ in select) { urlBuilder_.Append(System.Uri.EscapeDataString("select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortAscending != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortAscending")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<AnalyticsResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<AnalyticsResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns summary statistical data for a given role, dimension, and summary type.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_analytics_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="role">A valid role</param>
        /// <param name="dimension">PRODUCT_SKU – Only available if role = VENDOR
        /// <br/>VENDOR_PRODUCT_SKU – Only available if role = AFFILIATE</param>
        /// <param name="account">Account/site to query for.</param>
        /// <param name="summaryType">This parameter specifies which type of summary data is desired.
        /// <br/>VENDOR_ONLY - this shows summary information for only the selected account
        /// <br/>AFFILIATE_ONLY - this shows summary information which excludes the selected account</param>
        /// <param name="startDate">The start date of the time frame to report on - format is yyyy-MM-dd. Defaults to the previous day.</param>
        /// <param name="endDate">The end date of the time frame to report on - format is yyyy-MM-dd. Defaults to the current day.</param>
        /// <param name="dimensionFilter">This parameter limits the results returned to ones with a matching dimension id. This value is case sensitive.</param>
        /// <param name="select">This optional parameter specifies the data fields to return. Multiple select parameters may be passed to select multiple values. If this parameter is absent all values will be returned.</param>
        /// <param name="orderBy">This optional parameter specifies which data field the results should be ordered by.</param>
        /// <param name="sortAscending">When an order by is included this may be specified with a value of true to sort ascending instead of descending</param>
        /// <param name="page">The page number of the results (default is page 1).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<AnalyticsResult?>> GetStatisticsByRoleAndDimensionSummaryAsync(RoleAccount role, Dimension dimension, string account, SummaryType summaryType, DateOnly? startDate = null, DateOnly? endDate = null, Dimension? dimensionFilter = null, System.Collections.Generic.IEnumerable<DimensionColumn>? select = null, DimensionColumn? orderBy = null, bool? sortAscending = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role == null)
                throw new System.ArgumentNullException("role");

            if (dimension == null)
                throw new System.ArgumentNullException("dimension");

            if (account == null)
                throw new System.ArgumentNullException("account");

            if (summaryType == null)
                throw new System.ArgumentNullException("summaryType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/analytics/{role}/{dimension}/summary"
                    urlBuilder_.Append("rest/1.3/analytics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(dimension, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/summary");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("summaryType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(summaryType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dimensionFilter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dimensionFilter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dimensionFilter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        foreach (var item_ in select) { urlBuilder_.Append(System.Uri.EscapeDataString("select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (orderBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortAscending != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortAscending")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<AnalyticsResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<AnalyticsResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDebugClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// When you send a request to the debugging service, it returns the request context information including the security context information. This can be useful when correcting issues with the ClickBank APIs.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetDebugAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DebugClient : ClickBankClientBase, IDebugClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DebugClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// When you send a request to the debugging service, it returns the request context information including the security context information. This can be useful when correcting issues with the ClickBank APIs.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetDebugAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/debug"
                    urlBuilder_.Append("rest/1.3/debug");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 403)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IImagesClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists images associated with a site
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the images</param>
        /// <param name="type">The image type.  Must be PRODUCT, BANNER, or BANNER_BG</param>
        /// <param name="approvedOnly">boolean - if true only approved images [Default = true]</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<ImageListResult?>> GetImagesAsync(string? site = null, ImageType? type = null, bool? approvedOnly = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ImagesClient : ClickBankClientBase, IImagesClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ImagesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists images associated with a site
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the images</param>
        /// <param name="type">The image type.  Must be PRODUCT, BANNER, or BANNER_BG</param>
        /// <param name="approvedOnly">boolean - if true only approved images [Default = true]</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<ImageListResult?>> GetImagesAsync(string? site = null, ImageType? type = null, bool? approvedOnly = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/images/list"
                    urlBuilder_.Append("rest/1.3/images/list");
                    urlBuilder_.Append('?');
                    if (site != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("site")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(site, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (approvedOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("approvedOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(approvedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImageListResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ImageListResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImageListResult?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ImageListResult?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOrdersClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to restart a cancelled subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReinstateOrderAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="restartDate">The date when the subscription will be resumed in format yyyy-mm-dd</param>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseOrderAsync(string receipt, DateOnly? restartDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to extend a subscription by a given number of rebill periods
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="numPeriods">The number of periods to extend the subscription by</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExtendOrderAsync(string receipt, int? numPeriods = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change (upgrade or downgrade) the product associated with a subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write • api_subscription_modifications
        /// </remarks>
        /// <param name="oldSku">The SKU of the current product for the subscription.</param>
        /// <param name="newSku">The SKU of the new product for the subscription.</param>
        /// <param name="carryAffiliate">Determines if the affiliate from the original transaction is carried over to the new subscription.</param>
        /// <param name="applyProratedRefund">Determines if the prorated refund should be applied on the product change. This parameter will default to TRUE if not explicitly set</param>
        /// <param name="nextRebillDate">Allows the vendor to change the date of the next rebill. Date Format is YYYY-MM-DD. Not passing in any value will set the next rebill date to the next day of product change</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeProductOrderAsync(string receipt, string? oldSku = null, string? newSku = null, bool? carryAffiliate = null, bool? applyProratedRefund = null, DateOnly? nextRebillDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows a vendor to change shipping address of a physical recurring subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write
        /// </remarks>
        /// <param name="address1">Updated address (line 1).</param>
        /// <param name="city">Updated city.</param>
        /// <param name="countryCode">Updated country code.</param>
        /// <param name="firstName">Updated customer first name.</param>
        /// <param name="lastName">Updated customer last name.</param>
        /// <param name="address2">Updated address (line 2).</param>
        /// <param name="county">Updated county.</param>
        /// <param name="province">Updated state or province.</param>
        /// <param name="postalCode">Updated postal code or Zip.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeAddressOrderAsync(string receipt, string? address1 = null, string? city = null, string? countryCode = null, string? firstName = null, string? lastName = null, string? address2 = null, string? county = null, string? province = null, string? postalCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Same as the list command, except that this one returns the count of the orders returned based on the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd)</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd)</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND / TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetOrderCountAsync(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? email = null, string? tid = null, RoleAccount? role = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List orders for the authenticated user scoped to the search criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd).  If a startDate is specified, you must also specify an endDate.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). If an endDate is specified, you must also specify a startDate.</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND /TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="amount">The transaction total amount</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<OrderList?>> GetOrdersAsync(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, RoleAccount? role = null, string? postalCode = null, double? amount = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// This head request is used to identify if a particular order or a subscription is active, i.e. it has not been refunded, chargebacked or cancelled. It will return a 403 (Forbidden) if that's the case, or a 204 if the order is still active. Note that it will also return a 403 if the order is not found, or the user does not have access to that receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetOrderStatusAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of order detail objects which match the given receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderList?> GetOrderAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all the upsell transactions for the given parent upsell transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderList?> GetOrderUpsellsAsync(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class OrdersClient : ClickBankClientBase, IOrdersClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public OrdersClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to restart a cancelled subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ReinstateOrderAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/reinstate"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reinstate");
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="restartDate">The date when the subscription will be resumed in format yyyy-mm-dd</param>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PauseOrderAsync(string receipt, DateOnly? restartDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/pause"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pause");
                    urlBuilder_.Append('?');
                    if (restartDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("restartDate")).Append('=').Append(System.Uri.EscapeDataString(restartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to extend a subscription by a given number of rebill periods
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="numPeriods">The number of periods to extend the subscription by</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExtendOrderAsync(string receipt, int? numPeriods = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/extend"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/extend");
                    urlBuilder_.Append('?');
                    if (numPeriods != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("numPeriods")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(numPeriods, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change (upgrade or downgrade) the product associated with a subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write • api_subscription_modifications
        /// </remarks>
        /// <param name="oldSku">The SKU of the current product for the subscription.</param>
        /// <param name="newSku">The SKU of the new product for the subscription.</param>
        /// <param name="carryAffiliate">Determines if the affiliate from the original transaction is carried over to the new subscription.</param>
        /// <param name="applyProratedRefund">Determines if the prorated refund should be applied on the product change. This parameter will default to TRUE if not explicitly set</param>
        /// <param name="nextRebillDate">Allows the vendor to change the date of the next rebill. Date Format is YYYY-MM-DD. Not passing in any value will set the next rebill date to the next day of product change</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangeProductOrderAsync(string receipt, string? oldSku = null, string? newSku = null, bool? carryAffiliate = null, bool? applyProratedRefund = null, DateOnly? nextRebillDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/changeProduct"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/changeProduct");
                    urlBuilder_.Append('?');
                    if (oldSku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("oldSku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(oldSku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (newSku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("newSku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newSku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (carryAffiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("carryAffiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carryAffiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (applyProratedRefund != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("applyProratedRefund")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(applyProratedRefund, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nextRebillDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("nextRebillDate")).Append('=').Append(System.Uri.EscapeDataString(nextRebillDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows a vendor to change shipping address of a physical recurring subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write
        /// </remarks>
        /// <param name="address1">Updated address (line 1).</param>
        /// <param name="city">Updated city.</param>
        /// <param name="countryCode">Updated country code.</param>
        /// <param name="firstName">Updated customer first name.</param>
        /// <param name="lastName">Updated customer last name.</param>
        /// <param name="address2">Updated address (line 2).</param>
        /// <param name="county">Updated county.</param>
        /// <param name="province">Updated state or province.</param>
        /// <param name="postalCode">Updated postal code or Zip.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangeAddressOrderAsync(string receipt, string? address1 = null, string? city = null, string? countryCode = null, string? firstName = null, string? lastName = null, string? address2 = null, string? county = null, string? province = null, string? postalCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/changeAddress"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/changeAddress");
                    urlBuilder_.Append('?');
                    if (address1 != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address1")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address1, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (city != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("city")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (countryCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("countryCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (firstName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("firstName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (address2 != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address2")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address2, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (county != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("county")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(county, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (province != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("province")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(province, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postalCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postalCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Same as the list command, except that this one returns the count of the orders returned based on the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd)</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd)</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND / TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetOrderCountAsync(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? email = null, string? tid = null, RoleAccount? role = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/count"
                    urlBuilder_.Append("rest/1.3/orders/count");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vendor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("vendor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vendor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (affiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("affiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(affiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            int.TryParse(responseData_, out var result_);
                            return result_;
                        }
                        else
                        if (status_ == 403)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List orders for the authenticated user scoped to the search criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd).  If a startDate is specified, you must also specify an endDate.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). If an endDate is specified, you must also specify a startDate.</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND /TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="amount">The transaction total amount</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<OrderList?>> GetOrdersAsync(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, RoleAccount? role = null, string? postalCode = null, double? amount = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/list"
                    urlBuilder_.Append("rest/1.3/orders/list");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vendor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("vendor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vendor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (affiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("affiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(affiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postalCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postalCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<OrderList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<OrderList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// This head request is used to identify if a particular order or a subscription is active, i.e. it has not been refunded, chargebacked or cancelled. It will return a 403 (Forbidden) if that's the case, or a 204 if the order is still active. Note that it will also return a 403 if the order is not found, or the user does not have access to that receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetOrderStatusAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("HEAD");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of order detail objects which match the given receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderList?> GetOrderAsync(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all the upsell transactions for the given parent upsell transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderList?> GetOrderUpsellsAsync(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders/{receipt}/upsells"
                    urlBuilder_.Append("rest/1.3/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/upsells");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            return null;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOrders2Client
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows a vendor to change shipping address of a physical recurring subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write
        /// </remarks>
        /// <param name="address1">Updated address (line 1).</param>
        /// <param name="city">Updated city.</param>
        /// <param name="countryCode">Updated country code.</param>
        /// <param name="firstName">Updated customer first name.</param>
        /// <param name="lastName">Updated customer last name.</param>
        /// <param name="address2">Updated address (line 2).</param>
        /// <param name="county">Updated county.</param>
        /// <param name="province">Updated state or province.</param>
        /// <param name="postalCode">Updated postal code or Zip.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeAddressOrder2Async(string receipt, string? address1 = null, string? city = null, string? countryCode = null, string? firstName = null, string? lastName = null, string? address2 = null, string? county = null, string? province = null, string? postalCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="changeDate">The date when the subscription will be next billed in format yyyy-mm-dd</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeDateOrderAsync(string receipt, DateOnly? changeDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change (upgrade or downgrade) the product associated with a subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write • api_subscription_modifications
        /// </remarks>
        /// <param name="oldSku">The SKU of the current product for the subscription.</param>
        /// <param name="newSku">The SKU of the new product for the subscription.</param>
        /// <param name="carryAffiliate">Determines if the affiliate from the original transaction is carried over to the new subscription.</param>
        /// <param name="applyProratedRefund">Determines if the pro rated refund should be applied on the product change. This parameter will default to TRUE if not explicitly set</param>
        /// <param name="nextRebillDate">Allows the vendor to change the date of the next rebill. Date Format is YYYY-MM-DD. Not passing in any value will set the next rebill date to the next day of product change</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangeProductOrder2Async(string receipt, string? oldSku = null, string? newSku = null, bool? carryAffiliate = null, bool? applyProratedRefund = null, DateOnly? nextRebillDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to extend a subscription by a given number of rebill periods
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="numPeriods">The number of periods to extend the subscription by</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExtendOrder2Async(string receipt, int? numPeriods = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of order detail objects which match the given receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderList?> GetOrder2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// This head request is used to identify if a particular order or a subscription is active, i.e. it has not been refunded, chargebacked or cancelled. It will return a 403 (Forbidden) if that's the case, or a 204 if the order is still active. Note that it will also return a 403 if the order is not found, or the user does not have access to that receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetOrderStatus2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Same as the list command, except that this one returns the count of the orders returned based on the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd)</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd)</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND / TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetOrderCount2Async(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, string? postalCode = null, RoleAccount? role = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List orders for the authenticated user scoped to the search criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd).  If a startDate is specified, you must also specify an endDate.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). If an endDate is specified, you must also specify a startDate.</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND /TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="amount">The transaction total amount</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<OrderList?>> GetOrders2Async(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, RoleAccount? role = null, string? postalCode = null, double? amount = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all the upsell transactions for the given parent upsell transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderList?> GetOrderUpsells2Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="restartDate">The date when the subscription will be resumed in format yyyy-mm-dd</param>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseOrder2Async(string receipt, DateOnly? restartDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to restart a cancelled subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReinstateOrder2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Orders2Client : ClickBankClientBase, IOrders2Client
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Orders2Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows a vendor to change shipping address of a physical recurring subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write
        /// </remarks>
        /// <param name="address1">Updated address (line 1).</param>
        /// <param name="city">Updated city.</param>
        /// <param name="countryCode">Updated country code.</param>
        /// <param name="firstName">Updated customer first name.</param>
        /// <param name="lastName">Updated customer last name.</param>
        /// <param name="address2">Updated address (line 2).</param>
        /// <param name="county">Updated county.</param>
        /// <param name="province">Updated state or province.</param>
        /// <param name="postalCode">Updated postal code or Zip.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangeAddressOrder2Async(string receipt, string? address1 = null, string? city = null, string? countryCode = null, string? firstName = null, string? lastName = null, string? address2 = null, string? county = null, string? province = null, string? postalCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/changeAddress"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/changeAddress");
                    urlBuilder_.Append('?');
                    if (address1 != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address1")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address1, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (city != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("city")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (countryCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("countryCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (firstName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("firstName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (address2 != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address2")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address2, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (county != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("county")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(county, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (province != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("province")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(province, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postalCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postalCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="changeDate">The date when the subscription will be next billed in format yyyy-mm-dd</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangeDateOrderAsync(string receipt, DateOnly? changeDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/changeDate"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/changeDate");
                    urlBuilder_.Append('?');
                    if (changeDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("changeDate")).Append('=').Append(System.Uri.EscapeDataString(changeDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change (upgrade or downgrade) the product associated with a subscription.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_order_write • api_subscription_modifications
        /// </remarks>
        /// <param name="oldSku">The SKU of the current product for the subscription.</param>
        /// <param name="newSku">The SKU of the new product for the subscription.</param>
        /// <param name="carryAffiliate">Determines if the affiliate from the original transaction is carried over to the new subscription.</param>
        /// <param name="applyProratedRefund">Determines if the pro rated refund should be applied on the product change. This parameter will default to TRUE if not explicitly set</param>
        /// <param name="nextRebillDate">Allows the vendor to change the date of the next rebill. Date Format is YYYY-MM-DD. Not passing in any value will set the next rebill date to the next day of product change</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangeProductOrder2Async(string receipt, string? oldSku = null, string? newSku = null, bool? carryAffiliate = null, bool? applyProratedRefund = null, DateOnly? nextRebillDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/changeProduct"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/changeProduct");
                    urlBuilder_.Append('?');
                    if (oldSku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("oldSku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(oldSku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (newSku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("newSku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newSku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (carryAffiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("carryAffiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carryAffiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (applyProratedRefund != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("applyProratedRefund")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(applyProratedRefund, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nextRebillDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("nextRebillDate")).Append('=').Append(System.Uri.EscapeDataString(nextRebillDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to extend a subscription by a given number of rebill periods
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="numPeriods">The number of periods to extend the subscription by</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ExtendOrder2Async(string receipt, int? numPeriods = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/extend"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/extend");
                    urlBuilder_.Append('?');
                    if (numPeriods != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("numPeriods")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(numPeriods, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of order detail objects which match the given receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderList?> GetOrder2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// This head request is used to identify if a particular order or a subscription is active, i.e. it has not been refunded, chargebacked or cancelled. It will return a 403 (Forbidden) if that's the case, or a 204 if the order is still active. Note that it will also return a 403 if the order is not found, or the user does not have access to that receipt.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetOrderStatus2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("HEAD");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Same as the list command, except that this one returns the count of the orders returned based on the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd)</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd)</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND / TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetOrderCount2Async(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, string? postalCode = null, RoleAccount? role = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/count"
                    urlBuilder_.Append("rest/1.3/orders2/count");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vendor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("vendor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vendor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (affiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("affiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(affiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postalCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postalCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            int.TryParse(responseData_, out var result_);
                            return result_;
                        }
                        else
                        if (status_ == 403)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List orders for the authenticated user scoped to the search criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd).  If a startDate is specified, you must also specify an endDate.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). If an endDate is specified, you must also specify a startDate.</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND /TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="amount">The transaction total amount</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<OrderList?>> GetOrders2Async(DateOnly? startDate = null, DateOnly? endDate = null, TransactionType? type = null, string? vendor = null, string? affiliate = null, string? lastName = null, string? item = null, string? email = null, string? tid = null, RoleAccount? role = null, string? postalCode = null, double? amount = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/list"
                    urlBuilder_.Append("rest/1.3/orders2/list");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (vendor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("vendor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vendor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (affiliate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("affiliate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(affiliate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postalCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postalCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<OrderList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<OrderList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all the upsell transactions for the given parent upsell transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderList?> GetOrderUpsells2Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/upsells"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/upsells");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            return null;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="restartDate">The date when the subscription will be resumed in format yyyy-mm-dd</param>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PauseOrder2Async(string receipt, DateOnly? restartDate = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/pause"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pause");
                    urlBuilder_.Append('?');
                    if (restartDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("restartDate")).Append('=').Append(System.Uri.EscapeDataString(restartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// *BETA* Allows a vendor to restart a cancelled subscription
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: HAS_DEVELOPER_KEY • api_subscription_modifications
        /// </remarks>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ReinstateOrder2Async(string receipt, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/orders2/{receipt}/reinstate"
                    urlBuilder_.Append("rest/1.3/orders2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reinstate");
                    urlBuilder_.Append('?');
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IProductsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a product
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the product to be retrieved.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Product?> GetProductAsync(string sku, string? site = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves a product with the passed in parameters
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the product to be saved.</param>
        /// <param name="currency">The currency the product is sold in.</param>
        /// <param name="price">The price for the product.  Or in the case of RECURRING or RECURRING_PHYSICAL products, the initial price.</param>
        /// <param name="language">The language of the product.  Must be either DE (German), EN (English), ES, (Spanish), FR (French), IT (Italian), or PT (Portuguese)</param>
        /// <param name="title">The title of the product</param>
        /// <param name="digital">product has digital component</param>
        /// <param name="physical">product has physical component</param>
        /// <param name="digitalRecurring">product has digital recurring component</param>
        /// <param name="physicalRecurring">product has physical recurring component</param>
        /// <param name="categories">The categories for digital products.  At least one is required for a product with a digital component, multiple may be specified. Must be either EBOOK, SOFTWARE, GAMES, AUDIO, VIDEO, or MEMBER_SITE. Providing a category for a product without a digital component will result in an error.</param>
        /// <param name="skipConfirmationPage">Whether or not to skip confirmation page.  This parameter is role restricted.  If you do not have the role, it will not be honored.</param>
        /// <param name="thankYouPage">The thank you page for desktops. Either thankYouPage or mobileThankYouPage is required</param>
        /// <param name="mobileThankYouPage">The thank you page for mobile devices.</param>
        /// <param name="rebillPrice">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill price.</param>
        /// <param name="rebillCommission">In the case of RECURRING or RECURRING_PHYSICAL products the rebill commission.</param>
        /// <param name="trialPeriod">In the case of RECURRING or RECURRING_PHYSICAL (required) products the trial period.  Must  be either 0 or a whole number between 3 and 31.</param>
        /// <param name="frequency">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill frequency. Must be either WEEKLY, BI_WEEKLY, MONTHLY, QUARTERLY, HALF_YEARLY or YEARLY</param>
        /// <param name="duration">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill duration.</param>
        /// <param name="shippingProfile">In the case of PHYSICAL or RECURRING_PHYSICAL products the name of the shipping profile</param>
        /// <param name="purchaseCommission">The commission rate for the product - if unspecified the sites commission rate will be used.</param>
        /// <param name="description">In the case of PHYSICAL or RECURRING_PHYSICAL (required) the description of the product.</param>
        /// <param name="image">The id of the image associated to the product</param>
        /// <param name="pitchPage">The URL where you pitch your product. This might be the same as the HopLink Target URL. Either pitchPage or mobilePitchPage is required.</param>
        /// <param name="mobilePitchPage">The URL where you pitch your product to customers on mobile devices. This might be the same as the HopLink Target URL. Either pitchPage or mobilePitchPage is required.</param>
        /// <param name="saleRefundDaysLimit">The number days within which a sale can be refunded</param>
        /// <param name="rebillRefundDaysLimit">The number days within which a rebill can be refunded</param>
        /// <param name="deliveryMethod">The method of delivery.</param>
        /// <param name="deliverySpeed">The speed of delivery.</param>
        /// <param name="preRebillNotificationOverride">When set, Pre-rebill notificaitons will be sent when the frequency is greater than the required cycle.</param>
        /// <param name="preRebillNotificationLeadTime">The number of days before the rebill notification.  When enabled, a Pre-rebill notification will be sent to the number equal to the number of days indicated in the lead time and will apply to the rest of the subscription.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateProductAsync(string sku, string? site = null, Currency? currency = null, double? price = null, Language? language = null, string? title = null, bool? digital = null, bool? physical = null, bool? digitalRecurring = null, bool? physicalRecurring = null, ProductCategory? categories = null, bool? skipConfirmationPage = null, string? thankYouPage = null, string? mobileThankYouPage = null, double? rebillPrice = null, double? rebillCommission = null, int? trialPeriod = null, RecurringFrequency? frequency = null, int? duration = null, string? shippingProfile = null, string? purchaseCommission = null, string? description = null, int? image = null, string? pitchPage = null, string? mobilePitchPage = null, int? saleRefundDaysLimit = null, int? rebillRefundDaysLimit = null, string? deliveryMethod = null, string? deliverySpeed = null, bool? preRebillNotificationOverride = null, int? preRebillNotificationLeadTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning product to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProductAsync(string sku, string? site = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all products
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the products</param>
        /// <param name="type">The product types to return.d  Must be either STANDARD or RECURRING.  Will return all types if not specified</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<ProductList?>> GetProductsAsync(string? site = null, ProductType? type = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ProductsClient : ClickBankClientBase, IProductsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ProductsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a product
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the product to be retrieved.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Product?> GetProductAsync(string sku, string? site = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/products/{sku}"
                    urlBuilder_.Append("rest/1.3/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (site != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("site")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(site, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Product?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves a product with the passed in parameters
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the product to be saved.</param>
        /// <param name="currency">The currency the product is sold in.</param>
        /// <param name="price">The price for the product.  Or in the case of RECURRING or RECURRING_PHYSICAL products, the initial price.</param>
        /// <param name="language">The language of the product.  Must be either DE (German), EN (English), ES, (Spanish), FR (French), IT (Italian), or PT (Portuguese)</param>
        /// <param name="title">The title of the product</param>
        /// <param name="digital">product has digital component</param>
        /// <param name="physical">product has physical component</param>
        /// <param name="digitalRecurring">product has digital recurring component</param>
        /// <param name="physicalRecurring">product has physical recurring component</param>
        /// <param name="categories">The categories for digital products.  At least one is required for a product with a digital component, multiple may be specified. Must be either EBOOK, SOFTWARE, GAMES, AUDIO, VIDEO, or MEMBER_SITE. Providing a category for a product without a digital component will result in an error.</param>
        /// <param name="skipConfirmationPage">Whether or not to skip confirmation page.  This parameter is role restricted.  If you do not have the role, it will not be honored.</param>
        /// <param name="thankYouPage">The thank you page for desktops. Either thankYouPage or mobileThankYouPage is required</param>
        /// <param name="mobileThankYouPage">The thank you page for mobile devices.</param>
        /// <param name="rebillPrice">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill price.</param>
        /// <param name="rebillCommission">In the case of RECURRING or RECURRING_PHYSICAL products the rebill commission.</param>
        /// <param name="trialPeriod">In the case of RECURRING or RECURRING_PHYSICAL (required) products the trial period.  Must  be either 0 or a whole number between 3 and 31.</param>
        /// <param name="frequency">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill frequency. Must be either WEEKLY, BI_WEEKLY, MONTHLY, QUARTERLY, HALF_YEARLY or YEARLY</param>
        /// <param name="duration">In the case of RECURRING or RECURRING_PHYSICAL (required) products the rebill duration.</param>
        /// <param name="shippingProfile">In the case of PHYSICAL or RECURRING_PHYSICAL products the name of the shipping profile</param>
        /// <param name="purchaseCommission">The commission rate for the product - if unspecified the sites commission rate will be used.</param>
        /// <param name="description">In the case of PHYSICAL or RECURRING_PHYSICAL (required) the description of the product.</param>
        /// <param name="image">The id of the image associated to the product</param>
        /// <param name="pitchPage">The URL where you pitch your product. This might be the same as the HopLink Target URL. Either pitchPage or mobilePitchPage is required.</param>
        /// <param name="mobilePitchPage">The URL where you pitch your product to customers on mobile devices. This might be the same as the HopLink Target URL. Either pitchPage or mobilePitchPage is required.</param>
        /// <param name="saleRefundDaysLimit">The number days within which a sale can be refunded</param>
        /// <param name="rebillRefundDaysLimit">The number days within which a rebill can be refunded</param>
        /// <param name="deliveryMethod">The method of delivery.</param>
        /// <param name="deliverySpeed">The speed of delivery.</param>
        /// <param name="preRebillNotificationOverride">When set, Pre-rebill notificaitons will be sent when the frequency is greater than the required cycle.</param>
        /// <param name="preRebillNotificationLeadTime">The number of days before the rebill notification.  When enabled, a Pre-rebill notification will be sent to the number equal to the number of days indicated in the lead time and will apply to the rest of the subscription.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateProductAsync(string sku, string? site = null, Currency? currency = null, double? price = null, Language? language = null, string? title = null, bool? digital = null, bool? physical = null, bool? digitalRecurring = null, bool? physicalRecurring = null, ProductCategory? categories = null, bool? skipConfirmationPage = null, string? thankYouPage = null, string? mobileThankYouPage = null, double? rebillPrice = null, double? rebillCommission = null, int? trialPeriod = null, RecurringFrequency? frequency = null, int? duration = null, string? shippingProfile = null, string? purchaseCommission = null, string? description = null, int? image = null, string? pitchPage = null, string? mobilePitchPage = null, int? saleRefundDaysLimit = null, int? rebillRefundDaysLimit = null, string? deliveryMethod = null, string? deliverySpeed = null, bool? preRebillNotificationOverride = null, int? preRebillNotificationLeadTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/products/{sku}"
                    urlBuilder_.Append("rest/1.3/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (site != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("site")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(site, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (price != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (digital != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("digital")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(digital, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (physical != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("physical")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(physical, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (digitalRecurring != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("digitalRecurring")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(digitalRecurring, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (physicalRecurring != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("physicalRecurring")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(physicalRecurring, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (categories != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("categories")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(categories, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skipConfirmationPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("skipConfirmationPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skipConfirmationPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (thankYouPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("thankYouPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(thankYouPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (mobileThankYouPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("mobileThankYouPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mobileThankYouPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rebillPrice != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rebillPrice")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rebillPrice, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rebillCommission != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rebillCommission")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rebillCommission, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (trialPeriod != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("trialPeriod")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(trialPeriod, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (frequency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("frequency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(frequency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (duration != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("duration")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(duration, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingProfile != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingProfile")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingProfile, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (purchaseCommission != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("purchaseCommission")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(purchaseCommission, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (image != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("image")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(image, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitchPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitchPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitchPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (mobilePitchPage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("mobilePitchPage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mobilePitchPage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (saleRefundDaysLimit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("saleRefundDaysLimit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(saleRefundDaysLimit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rebillRefundDaysLimit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rebillRefundDaysLimit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rebillRefundDaysLimit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deliveryMethod != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deliveryMethod")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deliveryMethod, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deliverySpeed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deliverySpeed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deliverySpeed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preRebillNotificationOverride != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preRebillNotificationOverride")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preRebillNotificationOverride, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preRebillNotificationLeadTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preRebillNotificationLeadTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preRebillNotificationLeadTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning product to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProductAsync(string sku, string? site = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/products/{sku}"
                    urlBuilder_.Append("rest/1.3/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (site != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("site")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(site, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all products
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_products_client • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="site">The site owning the products</param>
        /// <param name="type">The product types to return.d  Must be either STANDARD or RECURRING.  Will return all types if not specified</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<ProductList?>> GetProductsAsync(string? site = null, ProductType? type = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/products/list"
                    urlBuilder_.Append("rest/1.3/products/list");
                    urlBuilder_.Append('?');
                    if (site != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("site")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(site, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ProductList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ProductList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IQuickstatsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The count service sums the quickstat sale, refund and chargeback amounts based on the search criteria. If no search conditions are set, it will return the sum of the values for the last 45 days based on all the accounts linked to the API keys. The count service is similar to the list method except for the fact that it presents the user with one total of the dates specified the search criteria instead of listing each day's quickstat values individually. Note that the quickStatDate in the returned data will be null.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd). Defaults to 45 days from today if not specified.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). Defaults to today if not specified</param>
        /// <param name="account">The nickName of the account. Defaults to all  accounts if not specified.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetQuickstatCountAsync(DateOnly? startDate = null, DateOnly? endDate = null, string? account = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a list of all account nicknames which the current api user has read access.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountList?> GetQuickstatAccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the quickstats for the api user, based on the search criteria. If no search conditions are set, it will return the quickstats for all the accounts for the API user for the last 45 days
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd). Defaults to 45 days from today if not specified.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). Defaults to today if not specified</param>
        /// <param name="account">The nickName of the account. Defaults to all  accounts if not specified.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountList?> GetQuickstatsAsync(DateOnly? startDate = null, DateOnly? endDate = null, string? account = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class QuickstatsClient : ClickBankClientBase, IQuickstatsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public QuickstatsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The count service sums the quickstat sale, refund and chargeback amounts based on the search criteria. If no search conditions are set, it will return the sum of the values for the last 45 days based on all the accounts linked to the API keys. The count service is similar to the list method except for the fact that it presents the user with one total of the dates specified the search criteria instead of listing each day's quickstat values individually. Note that the quickStatDate in the returned data will be null.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd). Defaults to 45 days from today if not specified.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). Defaults to today if not specified</param>
        /// <param name="account">The nickName of the account. Defaults to all  accounts if not specified.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetQuickstatCountAsync(DateOnly? startDate = null, DateOnly? endDate = null, string? account = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/quickstats/count"
                    urlBuilder_.Append("rest/1.3/quickstats/count");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (account != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            int.TryParse(responseData_, out var result_);
                            return result_;
                        }
                        else
                        if (status_ == 403)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a list of all account nicknames which the current api user has read access.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountList?> GetQuickstatAccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/quickstats/accounts"
                    urlBuilder_.Append("rest/1.3/quickstats/accounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the quickstats for the api user, based on the search criteria. If no search conditions are set, it will return the quickstats for all the accounts for the API user for the last 45 days
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd). Defaults to 45 days from today if not specified.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). Defaults to today if not specified</param>
        /// <param name="account">The nickName of the account. Defaults to all  accounts if not specified.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountList?> GetQuickstatsAsync(DateOnly? startDate = null, DateOnly? endDate = null, string? account = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/quickstats/list"
                    urlBuilder_.Append("rest/1.3/quickstats/list");
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (account != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShippingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetShippingCountAsync(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippingsAsync(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNoticeAsync(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNoticeAsync(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShippingClient : ClickBankClientBase, IShippingClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ShippingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetShippingCountAsync(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping/count"
                    urlBuilder_.Append("rest/1.3/shipping/count");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippingsAsync(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping/list"
                    urlBuilder_.Append("rest/1.3/shipping/list");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNoticeAsync(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (carrier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("carrier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tracking != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tracking")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tracking, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (comments != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("comments")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(comments, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNoticeAsync(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShipping2Client
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetShippingCount2Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippings2Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <param name="fillOrder">Indicates that the receipt is part of an order to be shipped altogether, for which the remaining shipping notices should be automatically generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNotice2Async(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, bool? fillOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNotice2Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Shipping2Client : ClickBankClientBase, IShipping2Client
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Shipping2Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetShippingCount2Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping2/count"
                    urlBuilder_.Append("rest/1.3/shipping2/count");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippings2Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping2/list"
                    urlBuilder_.Append("rest/1.3/shipping2/list");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <param name="fillOrder">Indicates that the receipt is part of an order to be shipped altogether, for which the remaining shipping notices should be automatically generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNotice2Async(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, bool? fillOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping2/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping2/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (carrier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("carrier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tracking != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tracking")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tracking, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (comments != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("comments")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(comments, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fillOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fillOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fillOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNotice2Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping2/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping2/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShipping3Client
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetShippingCount3Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippings3Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <param name="fillOrder">Indicates that the receipt is part of an order to be shipped altogether, for which the remaining shipping notices should be automatically generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNotice3Async(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, bool? fillOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNotice3Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Shipping3Client : ClickBankClientBase, IShipping3Client
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Shipping3Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a count of physical goods orders matching the shipping criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetShippingCount3Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping3/count"
                    urlBuilder_.Append("rest/1.3/shipping3/count");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List physical goods orders matching the shipping criteria. Only the first 100 orders will be returned.&nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="status">Can be 'shipped', 'notshipped' or 'all' - to find related orders.</param>
        /// <param name="days">Return orders within the last n days. If start and end date are specified, they will take precedence over this value. If neither days, startDate or endDate is specified, it will default to last 30 days or orders.</param>
        /// <param name="startDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the start date</param>
        /// <param name="endDate">Instead of using the days parameter, a user can specify a date range (yyyy-mm-dd). This is the endDate</param>
        /// <param name="receipt">Search the physical good order by receipt. If this parameter is specified, the other search parameters will be ignored.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<ShippingList?>> GetShippings3Async(ShippingStatus? status = null, int? days = null, DateOnly? startDate = null, DateOnly? endDate = null, string? receipt = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping3/list"
                    urlBuilder_.Append("rest/1.3/shipping3/list");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (days != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("days")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<ShippingList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a shipping notice for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="date">The shipping date (yyyy-mm-dd).</param>
        /// <param name="carrier">The shipping carrier.</param>
        /// <param name="tracking">The tracking id.</param>
        /// <param name="comments">The comments associated with the notice.</param>
        /// <param name="item">The sku/itemNo of the line item. This parameter is required if the transaction includes multiple physical items.</param>
        /// <param name="fillOrder">Indicates that the receipt is part of an order to be shipped altogether, for which the remaining shipping notices should be automatically generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeData?> CreateShipNotice3Async(string receipt, DateOnly? date = null, string? carrier = null, string? tracking = null, string? comments = null, string? item = null, bool? fillOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping3/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping3/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (carrier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("carrier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tracking != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tracking")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tracking, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (comments != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("comments")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(comments, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (item != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("item")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fillOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fillOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fillOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the ship notices for the given transaction.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeList?> GetShipNotice3Async(string receipt, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/shipping3/shipnotice/{receipt}"
                    urlBuilder_.Append("rest/1.3/shipping3/shipnotice/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITicketsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ticket with the passed in parameters. Will return the created ticket if it's successful.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd', 'cncl' or 'tech'. For 'rfnd' the parameter refundType must also be specified. If the receipt is for a non-recurring product, either 'rfnd' or 'cncl' will automatically refund that sale.  For any receipt of a recurring product, a 'rfnd' will refund that receipt AND cancel any future billing, while a 'cncl' will only cancel future billing without issuing any refunds.</param>
        /// <param name="reason">The reason associated with the ticket. A ticket reason should be one of the following based on type: CNCLticket.type.cancel.1 (I did not receive additional value for the recurring payments).ticket.type.cancel.2 (I was not satisfied with the subscription / Subscription did not meet expectations) ticket.type.cancel.3 (I was unable to get support from the vendor) ticket.type.cancel.4 (Product was not compatible with my computer) ticket.type.cancel.5 (I am unable to afford continuing payments for this subscription) ticket.type.cancel.6 (I did not realize that I accepted the terms for continuing payments) ticket.type.cancel.7 (Other) ticket.type.cancel.not.mobile (Product was not compatible with my mobile device.) RFNDticket.type.refund.1 (I never received my product) ticket.type.refund.2 (I was not satisfied with the product. / Product did not meet expectations) ticket.type.refund.3 (Product was not compatible with my computer) ticket.type.refund.4 (I was unable to get technical support) ticket.type.refund.5 (I did not authorize the purchase) ticket.type.refund.6 (I do not recognize the purchase) ticket.type.refund.7 (Duplicate purchase. / Or already purchased product previously) ticket.type.refund.returned (Product returned) ticket.type.refund.8 (Other) ticket.type.refund.not.mobile (Product was not compatible with my mobile device.) TECHticket.type.tech_support.1 (I am unable to log in.) ticket.type.tech_support.2 (I had problems downloading the product.) ticket.type.tech_support.3 (I never received a valid registration code, please send a valid code.) ticket.type.tech_support.4 (I can't get the product to work.) ticket.type.tech_support.9 (Other)ticket.type.tech_support.10 (I never received my product.)</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <param name="comment">The comments associated with creating a ticket.</param>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified.  Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase. The resource /1.3/tickets/refundAmounts may be used to retrieve what amounts in the customers currency convert to.</param>
        /// <param name="retainSubscription">Specifies if the subscription should be retained after the refund has been processed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TicketData?> CreateTicketAsync(string receipt, TicketTypeRequest? type = null, TicketReasonRequest? reason = null, string? sku = null, string? comment = null, RefundType? refundType = null, double? refundAmount = null, bool? retainSubscription = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find a ticket by its ID. Will return the ticket with the given ID back. If the ticket does not exist, or the user is not authorized to view the ticket - a status code of 403 will be returned.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TicketData?> GetTicketAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows the user to close a ticket, comment on a ticket, change type of a ticket, or reopen the ticket. Will return a status code 200 if the action is successful, a 403 if user is not allowed to act on the ticket or the ticket does not exist. Upon success, this will return the ticket data. Please note that closing of a ticket manually means that the ticket is cancelled. So for example closing of an open refund ticket will cancel the refund request. If the action is not specified, the assumption is that the user is trying to comment on the ticket. Also note that reopening is only supported for closed tickets and will return a 400 status code otherwise.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="action">The action to be taken. Supported actions are 'change', 'close' and 'reopen'.</param>
        /// <param name="comment">The comments that go along with the action, or comments on the ticket. Comments are required when reopening a ticket.</param>
        /// <param name="type">If changing the type of the ticket, this will be one of rfnd, cncl, or tech. Note: Partial refunds are not allowed when changing to a rfnd ticket type. Tickets changed to rfnd will be full refunds.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeList?> UpdateTicketAsync(int id, TicketAction? action = null, string? comment = null, TicketTypeRequest? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Counts the tickets matching the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Counts a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be counted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetTicketCountAsync(TicketTypeRequest? type = null, string? status = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for tickets matching the search criteria. Will return a list of ticket data objects with a status code of 200. If more than 100 results are returned, it will return a status code of 206 [Partial Content]. Users can then use the 'Page' header to determine the page needed.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Find a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be returned.  Must be 4 or more characters in length, not counting the wildcard character ('%').  May not start with the wildcard character.</param>
        /// <param name="createDateFrom">The start of the createDate range to filter tickets by. If you provide a 'createDateFrom', you must also provide a 'createDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="createDateTo">The end of the createDate range to filter tickets by. If you provide a 'createDateTo', you must also provide a 'createDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateFrom">The start of the updateDate range to filter tickets by. If you provide a 'updateDateFrom', you must also provide a 'updateDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateTo">The end of the updateDate range to filter tickets by. If you provide a 'updateDateTo', you must also provide a 'updateDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateFrom">The start of the closeDate range to filter tickets by. If you provide a 'closeDateFrom', you must also provide a 'closeDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateTo">The end of the closeDate range to filter tickets by. If you provide a 'closeDateTo', you must also provide a 'closeDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClickBankResponse<TicketList?>> GetTicketsAsync(TicketTypeRequest? type = null, string? status = null, string? receipt = null, DateOnly? createDateFrom = null, DateOnly? createDateTo = null, DateOnly? updateDateFrom = null, DateOnly? updateDateTo = null, DateOnly? closeDateFrom = null, DateOnly? closeDateTo = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns amounts that would be refunded for a given refund type & value.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read
        /// </remarks>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified. Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase.</param>
        /// <param name="sku">line item sku/itemNo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartialRefundData?> GetTicketRefundAmountsAsync(string receipt, RefundType? refundType = null, double? refundAmount = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acknowledges return of physical item from customer, allowing refund of transaction to complete.  This call will return a status code of 204 if successful.  The body of the response will be empty in this case.  A 403 (Forbidden) status code will be return if access is denied.  A 400 (Bad Request) will be returned if the ticket isn't found or the ticket is not for a physical purchase.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShippingNoticeList?> ReturnedTicketAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class TicketsClient : ClickBankClientBase, ITicketsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TicketsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.clickbank.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ticket with the passed in parameters. Will return the created ticket if it's successful.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd', 'cncl' or 'tech'. For 'rfnd' the parameter refundType must also be specified. If the receipt is for a non-recurring product, either 'rfnd' or 'cncl' will automatically refund that sale.  For any receipt of a recurring product, a 'rfnd' will refund that receipt AND cancel any future billing, while a 'cncl' will only cancel future billing without issuing any refunds.</param>
        /// <param name="reason">The reason associated with the ticket. A ticket reason should be one of the following based on type: CNCLticket.type.cancel.1 (I did not receive additional value for the recurring payments).ticket.type.cancel.2 (I was not satisfied with the subscription / Subscription did not meet expectations) ticket.type.cancel.3 (I was unable to get support from the vendor) ticket.type.cancel.4 (Product was not compatible with my computer) ticket.type.cancel.5 (I am unable to afford continuing payments for this subscription) ticket.type.cancel.6 (I did not realize that I accepted the terms for continuing payments) ticket.type.cancel.7 (Other) ticket.type.cancel.not.mobile (Product was not compatible with my mobile device.) RFNDticket.type.refund.1 (I never received my product) ticket.type.refund.2 (I was not satisfied with the product. / Product did not meet expectations) ticket.type.refund.3 (Product was not compatible with my computer) ticket.type.refund.4 (I was unable to get technical support) ticket.type.refund.5 (I did not authorize the purchase) ticket.type.refund.6 (I do not recognize the purchase) ticket.type.refund.7 (Duplicate purchase. / Or already purchased product previously) ticket.type.refund.returned (Product returned) ticket.type.refund.8 (Other) ticket.type.refund.not.mobile (Product was not compatible with my mobile device.) TECHticket.type.tech_support.1 (I am unable to log in.) ticket.type.tech_support.2 (I had problems downloading the product.) ticket.type.tech_support.3 (I never received a valid registration code, please send a valid code.) ticket.type.tech_support.4 (I can't get the product to work.) ticket.type.tech_support.9 (Other)ticket.type.tech_support.10 (I never received my product.)</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <param name="comment">The comments associated with creating a ticket.</param>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified.  Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase. The resource /1.3/tickets/refundAmounts may be used to retrieve what amounts in the customers currency convert to.</param>
        /// <param name="retainSubscription">Specifies if the subscription should be retained after the refund has been processed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TicketData?> CreateTicketAsync(string receipt, TicketTypeRequest? type = null, TicketReasonRequest? reason = null, string? sku = null, string? comment = null, RefundType? refundType = null, double? refundAmount = null, bool? retainSubscription = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/{receipt}"
                    urlBuilder_.Append("rest/1.3/tickets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (reason != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("reason")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (comment != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("comment")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refundType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refundType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refundAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refundAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (retainSubscription != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("retainSubscription")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(retainSubscription, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TicketData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find a ticket by its ID. Will return the ticket with the given ID back. If the ticket does not exist, or the user is not authorized to view the ticket - a status code of 403 will be returned.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TicketData?> GetTicketAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/{id}"
                    urlBuilder_.Append("rest/1.3/tickets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TicketData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allows the user to close a ticket, comment on a ticket, change type of a ticket, or reopen the ticket. Will return a status code 200 if the action is successful, a 403 if user is not allowed to act on the ticket or the ticket does not exist. Upon success, this will return the ticket data. Please note that closing of a ticket manually means that the ticket is cancelled. So for example closing of an open refund ticket will cancel the refund request. If the action is not specified, the assumption is that the user is trying to comment on the ticket. Also note that reopening is only supported for closed tickets and will return a 400 status code otherwise.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="action">The action to be taken. Supported actions are 'change', 'close' and 'reopen'.</param>
        /// <param name="comment">The comments that go along with the action, or comments on the ticket. Comments are required when reopening a ticket.</param>
        /// <param name="type">If changing the type of the ticket, this will be one of rfnd, cncl, or tech. Note: Partial refunds are not allowed when changing to a rfnd ticket type. Tickets changed to rfnd will be full refunds.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeList?> UpdateTicketAsync(int id, TicketAction? action = null, string? comment = null, TicketTypeRequest? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/{id}"
                    urlBuilder_.Append("rest/1.3/tickets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (action != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("action")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(action, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (comment != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("comment")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            return null;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Counts the tickets matching the search criteria.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Counts a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be counted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetTicketCountAsync(TicketTypeRequest? type = null, string? status = null, string? receipt = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/count"
                    urlBuilder_.Append("rest/1.3/tickets/count");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for tickets matching the search criteria. Will return a list of ticket data objects with a status code of 200. If more than 100 results are returned, it will return a status code of 206 [Partial Content]. Users can then use the 'Page' header to determine the page needed.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Find a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be returned.  Must be 4 or more characters in length, not counting the wildcard character ('%').  May not start with the wildcard character.</param>
        /// <param name="createDateFrom">The start of the createDate range to filter tickets by. If you provide a 'createDateFrom', you must also provide a 'createDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="createDateTo">The end of the createDate range to filter tickets by. If you provide a 'createDateTo', you must also provide a 'createDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateFrom">The start of the updateDate range to filter tickets by. If you provide a 'updateDateFrom', you must also provide a 'updateDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateTo">The end of the updateDate range to filter tickets by. If you provide a 'updateDateTo', you must also provide a 'updateDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateFrom">The start of the closeDate range to filter tickets by. If you provide a 'closeDateFrom', you must also provide a 'closeDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateTo">The end of the closeDate range to filter tickets by. If you provide a 'closeDateTo', you must also provide a 'closeDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ClickBankResponse<TicketList?>> GetTicketsAsync(TicketTypeRequest? type = null, string? status = null, string? receipt = null, DateOnly? createDateFrom = null, DateOnly? createDateTo = null, DateOnly? updateDateFrom = null, DateOnly? updateDateTo = null, DateOnly? closeDateFrom = null, DateOnly? closeDateTo = null, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (page != null)
                        request_.Headers.TryAddWithoutValidation("page", ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/list"
                    urlBuilder_.Append("rest/1.3/tickets/list");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receipt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receipt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createDateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createDateFrom")).Append('=').Append(System.Uri.EscapeDataString(createDateFrom.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createDateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createDateTo")).Append('=').Append(System.Uri.EscapeDataString(createDateTo.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updateDateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updateDateFrom")).Append('=').Append(System.Uri.EscapeDataString(updateDateFrom.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updateDateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updateDateTo")).Append('=').Append(System.Uri.EscapeDataString(updateDateTo.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (closeDateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("closeDateFrom")).Append('=').Append(System.Uri.EscapeDataString(closeDateFrom.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (closeDateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("closeDateTo")).Append('=').Append(System.Uri.EscapeDataString(closeDateTo.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TicketList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<TicketList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TicketList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return new ClickBankResponse<TicketList?>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns amounts that would be refunded for a given refund type & value.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read
        /// </remarks>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified. Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase.</param>
        /// <param name="sku">line item sku/itemNo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PartialRefundData?> GetTicketRefundAmountsAsync(string receipt, RefundType? refundType = null, double? refundAmount = null, string? sku = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receipt == null)
                throw new System.ArgumentNullException("receipt");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/refundAmounts/{receipt}"
                    urlBuilder_.Append("rest/1.3/tickets/refundAmounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receipt, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (refundType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refundType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refundAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refundAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sku != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartialRefundData?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acknowledges return of physical item from customer, allowing refund of transaction to complete.  This call will return a status code of 204 if successful.  The body of the response will be empty in this case.  A 403 (Forbidden) status code will be return if access is denied.  A 400 (Bad Request) will be returned if the ticket isn't found or the ticket is not for a physical purchase.
        /// </summary>
        /// <remarks>
        /// <b>Permissions Required</b>: api_order_read • api_order_write • HAS_DEVELOPER_KEY
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShippingNoticeList?> ReturnedTicketAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/1.3/tickets/{id}/returned"
                    urlBuilder_.Append("rest/1.3/tickets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/returned");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShippingNoticeList?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            return null;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountData
    {

        [System.Text.Json.Serialization.JsonPropertyName("nickName")]
        public string? NickName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quickStats")]
        public System.Collections.Generic.ICollection<QuickStatsData>? QuickStats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountList
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountData")]
        public System.Collections.Generic.ICollection<AccountData>? AccountData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActiveStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnalyticAttribute
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DIMENSION_VALUE")]
        DIMENSION_VALUE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOP_COUNT")]
        HOP_COUNT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_IMPRESSION")]
        ORDER_IMPRESSION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL_ORDER_IMPRESSION")]
        INITIAL_ORDER_IMPRESSION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL_ORDER_IMPRESSION")]
        UPSELL_ORDER_IMPRESSION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_SUBMISSION")]
        ORDER_SUBMISSION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE_COUNT")]
        SALE_COUNT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE_AMOUNT")]
        SALE_AMOUNT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_COUNT")]
        REFUND_COUNT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_AMOUNT")]
        REFUND_AMOUNT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_COUNT")]
        CHARGEBACK_COUNT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_AMOUNT")]
        CHARGEBACK_AMOUNT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_COUNT")]
        REBILL_COUNT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_AMOUNT")]
        REBILL_AMOUNT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL_COUNT")]
        UPSELL_COUNT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL_AMOUNT")]
        UPSELL_AMOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_ORDER_IMPRESSION")]
        TOTAL_ORDER_IMPRESSION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS_SALE_COUNT")]
        GROSS_SALE_COUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS_SALE_AMOUNT")]
        GROSS_SALE_AMOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_SALE_COUNT")]
        NET_SALE_COUNT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_SALE_AMOUNT")]
        NET_SALE_AMOUNT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNINGS_PER_HOP")]
        EARNINGS_PER_HOP = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNINGS_PER_CLICK")]
        EARNINGS_PER_CLICK = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"HOPS_PER_SALE")]
        HOPS_PER_SALE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"HOPS_PER_ORDER_FORM_IMPRESSION")]
        HOPS_PER_ORDER_FORM_IMPRESSION = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_FORM_SALE_CONVERSION")]
        ORDER_FORM_SALE_CONVERSION = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_RATE")]
        REFUND_RATE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_RATE")]
        CHARGEBACK_RATE = 27,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? LastUpdateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]
        public Rows? Rows { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totals")]
        public Totals? Totals { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsResultRow
    {

        [System.Text.Json.Serialization.JsonPropertyName("dimensionIdentifier")]
        public string? DimensionIdentifier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionValue")]
        public string? DimensionValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountNickName")]
        public string? AccountNickName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<AnalyticsValue>? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsValue
    {

        [System.Text.Json.Serialization.JsonPropertyName("attribute")]
        
        public AnalyticAttribute? Attribute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public AnalyticsValueDetail? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsValueDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("@type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The property name is actually `$` but this causes issues for code generators and is disabled for now.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("$")]
        public string? Dollar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactField
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string? Field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractBean
    {

        [System.Text.Json.Serialization.JsonPropertyName("contacts")]
        public System.Collections.Generic.ICollection<ContractContact>? Contacts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        
        public ContractStatus? Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractContact
    {

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public int? ProductId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public string? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("partner")]
        public string? Partner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_START")]
        PENDING_START = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_APPROVAL")]
        PENDING_APPROVAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATED")]
        TERMINATED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATION_REQUESTED")]
        TERMINATION_REQUESTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Dimension
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFFILIATE")]
        AFFILIATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_CURRENCY")]
        CUSTOMER_CURRENCY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_COUNTRY")]
        CUSTOMER_COUNTRY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROVINCE")]
        CUSTOMER_PROVINCE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_LANGUAGE")]
        CUSTOMER_LANGUAGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_SKU")]
        PRODUCT_SKU = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING_ID")]
        TRACKING_ID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR")]
        VENDOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR_CATEGORY")]
        VENDOR_CATEGORY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR_PRODUCT_SKU")]
        VENDOR_PRODUCT_SKU = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionColumn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_AMOUNT")]
        CHARGEBACK_AMOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_COUNT")]
        CHARGEBACK_COUNT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_RATE")]
        CHARGEBACK_RATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIMENSION_VALUE")]
        DIMENSION_VALUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNINGS_PER_HOP")]
        EARNINGS_PER_HOP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS_SALE_COUNT")]
        GROSS_SALE_COUNT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS_SALE_AMOUNT")]
        GROSS_SALE_AMOUNT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HOP_COUNT")]
        HOP_COUNT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HOPS_PER_SALE")]
        HOPS_PER_SALE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HOPS_PER_ORDER_FORM_IMPRESSION")]
        HOPS_PER_ORDER_FORM_IMPRESSION = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_SALE_AMOUNT")]
        NET_SALE_AMOUNT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_SALE_COUNT")]
        NET_SALE_COUNT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_FORM_SALE_CONVERSION")]
        ORDER_FORM_SALE_CONVERSION = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_IMPRESSION")]
        ORDER_IMPRESSION = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_SUBMISSION")]
        ORDER_SUBMISSION = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_AMOUNT")]
        REBILL_AMOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_COUNT")]
        REBILL_COUNT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_AMOUNT")]
        REFUND_AMOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_COUNT")]
        REFUND_COUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_RATE")]
        REFUND_RATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE_AMOUNT")]
        SALE_AMOUNT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE_COUNT")]
        SALE_COUNT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL_AMOUNT")]
        UPSELL_AMOUNT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL_COUNT")]
        UPSELL_COUNT = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageBean
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        
        public ImageType? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approved")]
        public bool? Approved { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageData
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        
        public ImageType? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approved")]
        public bool? Approved { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageList
    {

        [System.Text.Json.Serialization.JsonPropertyName("images")]
        public System.Collections.Generic.ICollection<ImageData>? Images { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageListResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("imageList")]
        public ImageList? ImageList { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_record_count")]
        public int? Total_record_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT")]
        PRODUCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BANNER")]
        BANNER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BANNER_CLASSIC")]
        BANNER_CLASSIC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BANNER_NEW")]
        BANNER_NEW = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BANNER_BG")]
        BANNER_BG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_BANNER")]
        CUSTOM_BANNER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_BANNER_BG")]
        CUSTOM_BANNER_BG = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_ORDERFORM")]
        CUSTOM_ORDERFORM = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Language
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EN")]
        EN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemData
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemNo")]
        public string? ItemNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTitle")]
        public string? ProductTitle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurring")]
        public bool? Recurring { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippable")]
        public bool? Shippable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerAmount")]
        public double? CustomerAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountAmount")]
        public double? AccountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineItemType")]
        
        public LineItemType? LineItemType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rebillAmount")]
        public double? RebillAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processedPayments")]
        public int? ProcessedPayments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("futurePayments")]
        public int? FuturePayments { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nextPaymentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? NextPaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        
        public LineItemStatus? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        
        public OrderRole? Role { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORIZATION_FAILURE")]
        AUTHORIZATION_FAILURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATION_FAILURE")]
        VALIDATION_FAILURE = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ORIGINAL")]
        ORIGINAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUMP")]
        BUMP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CART")]
        CART = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TOKEN")]
        TOKEN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSELL")]
        UPSELL = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderData
    {
        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? TransactionTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public string? Receipt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackingId")]
        public string? TrackingId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paytmentMethod")]
        
        public PaymentMethod? PaytmentMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        
        public TransactionType? TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalOrderAmount")]
        public double? TotalOrderAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalShippingAmount")]
        public double? TotalShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalTaxAmount")]
        public double? TotalTaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("affiliate")]
        public string? Affiliate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        
        public Currency? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("declinedConsent")]
        public bool? DeclinedConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerContactInfo")]
        public System.Collections.Generic.ICollection<ContactField>? CustomerContactInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        
        public OrderRole? Role { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string? FullName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerRefundableState")]
        
        public RefundableState? CustomerRefundableState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorVariables")]
        public VendorVariableElementArray? VendorVariables { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineItemData")]
        public System.Collections.Generic.ICollection<LineItemData>? LineItemData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderList
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderData")]
        public System.Collections.Generic.ICollection<OrderData>? OrderData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR")]
        VENDOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AFFILIATE")]
        AFFILIATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"JV_TRADITIONAL")]
        JV_TRADITIONAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"JV_UPSELL")]
        JV_UPSELL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderShipData
    {

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public string? Receipt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? TransactionTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestTransaction")]
        public bool? IsTestTransaction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string? FullName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorVariables")]
        public VendorVariableElementArray? VendorVariables { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineItemShipData")]
        public System.Collections.Generic.ICollection<OrderShipLineItemData>? LineItemShipData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderShipLineItemData
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemNo")]
        public string? ItemNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTitle")]
        public string? ProductTitle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerAmount")]
        public double? CustomerAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountAmount")]
        public double? AccountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingMethod")]
        public string? ShippingMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isRefundPending")]
        public bool? IsRefundPending { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasBeenRefunded")]
        public bool? HasBeenRefunded { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasBeenChargebacked")]
        public bool? HasBeenChargebacked { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialRefundData
    {

        [System.Text.Json.Serialization.JsonPropertyName("usdAmount")]
        public double? UsdAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerAmount")]
        public double? CustomerAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerCurrency")]
        public string? CustomerCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productAmount")]
        public double? ProductAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCurrency")]
        public string? ProductCurrency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PYPL")]
        PYPL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PYPL-NEW")]
        PYPL_NEW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MSTR")]
        MSTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DISC")]
        DISC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AMEX")]
        AMEX = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DNRS")]
        DNRS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MAES")]
        MAES = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST")]
        TEST = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"N/A")]
        N_A = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MSTR_PAZE")]
        MSTR_PAZE = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhysicalPricing
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipping_profile")]
        public string? Shipping_profile { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchPages
    {

        [System.Text.Json.Serialization.JsonPropertyName("desktop")]
        public string? Desktop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string? Mobile { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Price
    {

        [System.Text.Json.Serialization.JsonPropertyName("native_price")]
        public double? Native_price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usd")]
        public double? Usd { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usd_with_fees")]
        public double? Usd_with_fees { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pricing
    {

        [System.Text.Json.Serialization.JsonPropertyName("@currency")]
        
        public Currency? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standard")]
        public StandardPricing? Standard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("physical")]
        public PhysicalPricing? Physical { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurring")]
        public RecurringPricing? Recurring { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pricings
    {

        [System.Text.Json.Serialization.JsonPropertyName("pricing")]
        public Pricing? Pricing { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {

        [System.Text.Json.Serialization.JsonPropertyName("@sku")]
        public string? Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        
        public ActiveStatus? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("digital")]
        public bool? Digital { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("physical")]
        public bool? Physical { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("digitalRecurring")]
        public bool? DigitalRecurring { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("physicalRecurring")]
        public bool? PhysicalRecurring { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("site")]
        public string? Site { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public string? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updated")]
        public string? Updated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approval_status")]
        public ProductApprovalStatus? Approval_status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        
        public Language? Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("post_purchase_description")]
        public string? Post_purchase_description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public ImageBean? Image { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thank_you_pages")]
        public ThankYouPages? Thank_you_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pitch_pages")]
        public PitchPages? Pitch_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commission")]
        public ProductCommission? Commission { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pricings")]
        public System.Collections.Generic.ICollection<Pricings>? Pricings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contracts")]
        public System.Collections.Generic.ICollection<ContractBean>? Contracts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categories")]
        public System.Collections.Generic.ICollection<ProductCategoryItem>? Categories { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("disable_geo_currency")]
        public bool? Disable_geo_currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allow_currency_change")]
        public bool? Allow_currency_change { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("us_tax_exempt")]
        public bool? Us_tax_exempt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("revenue_recognition")]
        
        public RevRec? Revenue_recognition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reduced_upsell_markup")]
        public bool? Reduced_upsell_markup { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("skip_confirmation_page")]
        public bool? Skip_confirmation_page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_download_url")]
        public string? Admin_download_url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_mobile_download_url")]
        public string? Admin_mobile_download_url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("no_commission")]
        public bool? No_commission { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sale_refund_days_limit")]
        public int? Sale_refund_days_limit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rebill_refund_days_limit")]
        public int? Rebill_refund_days_limit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_restrict_flexible_refund")]
        public bool? Admin_restrict_flexible_refund { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commission_tier_override")]
        public bool? Commission_tier_override { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryMethod")]
        public string? DeliveryMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliverySpeed")]
        public string? DeliverySpeed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPartOfOrderBump")]
        public int? IsPartOfOrderBump { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isInitialOfOrderBump")]
        public bool? IsInitialOfOrderBump { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductOfOrderBump")]
        public bool? IsProductOfOrderBump { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberOnOrderForm")]
        public bool? PhoneNumberOnOrderForm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("delayedDelivery")]
        public bool? DelayedDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendRebillNotification")]
        public bool? SendRebillNotification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductApprovalStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticket_id")]
        public int? Ticket_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_action_performed_by")]
        
        public Role? Last_action_performed_by { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EBOOK")]
        EBOOK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE")]
        SOFTWARE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES")]
        GAMES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AUDIO")]
        AUDIO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMBER_SITE")]
        MEMBER_SITE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductCategoryItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        
        public ProductCategory? Category { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductCommission
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchase")]
        public double? Purchase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rebill")]
        public double? Rebill { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("no_rebill_commission")]
        public bool? No_rebill_commission { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commission_tier_override")]
        public bool? Commission_tier_override { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductList
    {

        [System.Text.Json.Serialization.JsonPropertyName("products")]
        public Products? Products { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_record_count")]
        public int? Total_record_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRING")]
        RECURRING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Products
    {

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public System.Collections.Generic.ICollection<Product?>? Product { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuickStatsData
    {
        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quickStatDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? QuickStatDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sale")]
        public double? Sale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public double? Refund { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("chargeback")]
        public double? Chargeback { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecurringFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEKLY")]
        WEEKLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BI_WEEKLY")]
        BI_WEEKLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"QUARTERLY")]
        QUARTERLY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HALF_YEARLY")]
        HALF_YEARLY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"YEARLY")]
        YEARLY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHS")]
        MONTHS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEKS")]
        WEEKS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DAYS")]
        DAYS = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurringPricing
    {

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public Price? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        
        public RecurringFrequency? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public int? Duration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trial_days")]
        public int? Trial_days { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pre_rebill_override")]
        public bool? Pre_rebill_override { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pre_rebill_leadtime")]
        public int? Pre_rebill_leadtime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurringTitle")]
        public string? RecurringTitle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurringDescription")]
        public string? RecurringDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequencyValue")]
        public int? FrequencyValue { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_PERCENT")]
        PARTIAL_PERCENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_AMOUNT")]
        PARTIAL_AMOUNT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_QUANTITY")]
        PARTIAL_QUANTITY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX")]
        TAX = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefundableState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDABLE")]
        REFUNDABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUGGESTED_REFUND_BLOCK")]
        SUGGESTED_REFUND_BLOCK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNREFUNDABLE")]
        UNREFUNDABLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALREADY_REFUNDED")]
        ALREADY_REFUNDED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_OLD")]
        TOO_OLD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_BLOCKED")]
        REFUND_BLOCKED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HAS_OPEN_REFUND")]
        HAS_OPEN_REFUND = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OVER_ELV_LIMIT")]
        OVER_ELV_LIMIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PROVIDER_DISCONNECTED")]
        PROVIDER_DISCONNECTED = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RevRec
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LD")]
        LD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VD")]
        VD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LM")]
        LM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LMA")]
        LMA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LMID")]
        LMID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VM")]
        VM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR")]
        VENDOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER")]
        CUSTOMER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CBCSR")]
        CBCSR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CBSYSTEM")]
        CBSYSTEM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoleAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR")]
        VENDOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AFFILIATE")]
        AFFILIATE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows
    {

        [System.Text.Json.Serialization.JsonPropertyName("row")]
        public System.Collections.Generic.ICollection<AnalyticsResultRow>? Row { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingList
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderShipData2")]
        public System.Collections.Generic.ICollection<OrderShipData>? OrderShipData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingNoticeData
    {
        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? ShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrier")]
        public string? Carrier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackingId")]
        public string? TrackingId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedTo")]
        public string? ShippedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public string? Receipt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNo")]
        public string? ItemNo { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingNoticeList
    {

        [System.Text.Json.Serialization.JsonPropertyName("shippingNoticeData")]
        public System.Collections.Generic.ICollection<ShippingNoticeData?>? ShippingNoticeData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"shipped")]
        SHIPPED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"notshipped")]
        NOTSHIPPED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        ALL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardPricing
    {

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public Price? Price { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionDetailResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int? TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public SubscriptionDetailsDataWrapper? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionDetailRowOrderBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIPT")]
        RECEIPT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PURCHASE_DATE")]
        PURCHASE_DATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_END_DATE")]
        SUB_END_DATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_CANCEL_DATE")]
        SUB_CANCEL_DATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEXT_PAYMENT_DATE")]
        NEXT_PAYMENT_DATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_VALUE")]
        SUB_VALUE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS")]
        STATUS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_NUMBER")]
        ITEM_NUMBER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_PAYMENTS_COUNT")]
        PROCESSED_PAYMENTS_COUNT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_PAYMENTS_COUNT")]
        FUTURE_PAYMENTS_COUNT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_COUNT")]
        REFUND_COUNT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_AMOUNT")]
        REFUND_AMOUNT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_COUNT")]
        CHARGEBACK_COUNT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGEBACK_AMOUNT")]
        CHARGEBACK_AMOUNT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PUB_NICK_NAME")]
        PUB_NICK_NAME = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AFFILIATE_NICK_NAME")]
        AFFILIATE_NICK_NAME = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_FIRST_NAME")]
        CUSTOMER_FIRST_NAME = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_LAST_NAME")]
        CUSTOMER_LAST_NAME = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_DISPLAY_NAME")]
        CUSTOMER_DISPLAY_NAME = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_EMAIL")]
        CUSTOMER_EMAIL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"DURATION")]
        DURATION = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL_SALE_AMOUNT")]
        INITIAL_SALE_AMOUNT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL_SALE_COUNT")]
        INITIAL_SALE_COUNT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_SALE_AMOUNT")]
        REBILL_SALE_AMOUNT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"REBILL_SALE_COUNT")]
        REBILL_SALE_COUNT = 24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionDetailsDataWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("row")]
        public System.Collections.Generic.ICollection<SubscriptionDetailsRowData>? Row { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionDetailsRowData
    {

        [System.Text.Json.Serialization.JsonPropertyName("affNickName")]
        public string? AffNickName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelled")]
        public bool? Cancelled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("chargebackAmount")]
        public double? ChargebackAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("chargebackCount")]
        public int? ChargebackCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string? CountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        
        public Currency? CurrencyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerDisplayName")]
        public string? CustomerDisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerFirstName")]
        public string? CustomerFirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerLastName")]
        public string? CustomerLastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public int? Duration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ftxnId")]
        public int? FtxnId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("futurePaymentsCount")]
        public int? FuturePaymentsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialSaleAmount")]
        public double? InitialSaleAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialSaleCount")]
        public int? InitialSaleCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNo")]
        public string? ItemNo { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nextPaymentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? NextPaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        
        public PaymentMethod? PaymentMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processedPaymentsCount")]
        public int? ProcessedPaymentsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pubNickName")]
        public string? PubNickName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? PurchaseDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rebillSaleAmount")]
        public double? RebillSaleAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rebillSaleCount")]
        public int? RebillSaleCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public string? Receipt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundAmount")]
        public double? RefundAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundCount")]
        public int? RefundCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subCancelDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? SubCancelDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subEndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? SubEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subValue")]
        public double? SubValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timeStr")]
        public string? TimeStr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trialPeriod")]
        public string? TrialPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("txnType")]
        public string? TxnType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionProductRowData
    {

        [System.Text.Json.Serialization.JsonPropertyName("avgActiveSubCnt")]
        public double? AvgActiveSubCnt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("avgSubAge")]
        public double? AvgSubAge { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("avgSubValue")]
        public double? AvgSubValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("businessDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? BusinessDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelSubCnt")]
        public double? CancelSubCnt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public int? Duration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossSales")]
        public double? GrossSales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialSaleAmt")]
        public double? InitialSaleAmt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialSaleCnt")]
        public double? InitialSaleCnt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemNo")]
        public string? ItemNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("netSales")]
        public double? NetSales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nickname")]
        public string? Nickname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public int? ProductId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurringSaleAmt")]
        public double? RecurringSaleAmt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recurringSaleCnt")]
        public double? RecurringSaleCnt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalSalesCnt")]
        public double? TotalSalesCnt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trialPeriod")]
        public string? TrialPeriod { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETRY_PAYMENT")]
        RETRY_PAYMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_NEW_CARD")]
        REQUEST_NEW_CARD = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionTrendsData
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int? TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public SubscriptionTrendsDataWrapper? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionTrendsDataWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("row")]
        public System.Collections.Generic.ICollection<SubscriptionProductRowData>? Row { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SummaryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR_ONLY")]
        VENDOR_ONLY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AFFILIATE_ONLY")]
        AFFILIATE_ONLY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThankYouPages
    {

        [System.Text.Json.Serialization.JsonPropertyName("desktop")]
        public string? Desktop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string? Mobile { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"change")]
        CHANGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"close")]
        CLOSE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"reopen")]
        REOPEN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSIGNED")]
        ASSIGNED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMENTED")]
        COMMENTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED")]
        CHANGED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REOPENED")]
        REOPENED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OPENED")]
        OPENED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DISAPPROVED")]
        DISAPPROVED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
        ATTACHMENT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN_CHANGE")]
        ADMIN_CHANGE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_ACKED")]
        REFUND_ACKED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_PHOTO_ID")]
        NEW_PHOTO_ID = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TicketCommentData
    {

        [System.Text.Json.Serialization.JsonPropertyName("commentId")]
        public int? CommentId { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        
        public TicketActionType? Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commentRole")]
        
        public Role? CommentRole { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TicketData
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticketId")]
        public int? TicketId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public string? Receipt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        
        public TicketStatus? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        
        public TicketType? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public System.Collections.Generic.ICollection<TicketCommentData>? Comments { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("openedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? OpenedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? ClosedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundType")]
        
        public RefundType? RefundType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundAmount")]
        public double? RefundAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerFirstName")]
        public string? CustomerFirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerLastName")]
        public string? CustomerLastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailAtOrderTime")]
        public string? EmailAtOrderTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locale")]
        public string? Locale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productItemNo")]
        public string? ProductItemNo { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public System.DateTimeOffset? UpdateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        
        public TicketSource? Source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TicketList
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticketData")]
        public System.Collections.Generic.ICollection<TicketData?>? TicketData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketReasonRequest
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.1")]
        TICKET_TYPE_CANCEL_1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.2")]
        TICKET_TYPE_CANCEL_2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.3")]
        TICKET_TYPE_CANCEL_3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.4")]
        TICKET_TYPE_CANCEL_4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.5")]
        TICKET_TYPE_CANCEL_5 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.6")]
        TICKET_TYPE_CANCEL_6 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.7")]
        TICKET_TYPE_CANCEL_7 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.cancel.not.mobile")]
        TICKET_TYPE_CANCEL_NOT_MOBILE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.1")]
        TICKET_TYPE_REFUND_1 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.2")]
        TICKET_TYPE_REFUND_2 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.3")]
        TICKET_TYPE_REFUND_3 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.4")]
        TICKET_TYPE_REFUND_4 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.5")]
        TICKET_TYPE_REFUND_5 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.6")]
        TICKET_TYPE_REFUND_6 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.7")]
        TICKET_TYPE_REFUND_7 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.8")]
        TICKET_TYPE_REFUND_8 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.returned")]
        TICKET_TYPE_REFUND_RETURNED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.refund.not.mobile")]
        TICKET_TYPE_REFUND_NOT_MOBILE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.1")]
        TICKET_TYPE_TECH_SUPPORT_1 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.2")]
        TICKET_TYPE_TECH_SUPPORT_2 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.3")]
        TICKET_TYPE_TECH_SUPPORT_3 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.4")]
        TICKET_TYPE_TECH_SUPPORT_4 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.9")]
        TICKET_TYPE_TECH_SUPPORT_9 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ticket.type.tech_support.10")]
        TICKET_TYPE_TECH_SUPPORT_10 = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"API")]
        API = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_WAM")]
        CUSTOMER_WAM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RNFDS_EMAIL")]
        RNFDS_EMAIL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CNCLS_EMAIL")]
        CNCLS_EMAIL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR_WAM")]
        VENDOR_WAM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VENDOR_ADMIN")]
        VENDOR_ADMIN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CSR_ADMIN")]
        CSR_ADMIN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SECURITY")]
        SECURITY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CSR_WAM")]
        CSR_WAM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CONVERSION_PROCESS")]
        CONVERSION_PROCESS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_DEVELOPMENT_FORM")]
        BUSINESS_DEVELOPMENT_FORM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNICATIONS_EMAIL")]
        COMMUNICATIONS_EMAIL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNTS_EMAIL")]
        ACCOUNTS_EMAIL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CBCS_EMAIL")]
        CBCS_EMAIL = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNTING_EMAIL")]
        ACCOUNTING_EMAIL = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"WAM_ACCT_QUESTION")]
        WAM_ACCT_QUESTION = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"WAM_WIREGROUP_DETAIL")]
        WAM_WIREGROUP_DETAIL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKETING_EMAIL")]
        MARKETING_EMAIL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENTECH_BATCH")]
        PAYMENTECH_BATCH = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PYPL_JPY_CANCELLER")]
        PYPL_JPY_CANCELLER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ECUSTOMS")]
        ECUSTOMS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"LASHBACK")]
        LASHBACK = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SPAM_EMAIL")]
        SPAM_EMAIL = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"CLICKBANK_DATABASE_SCRIPT")]
        CLICKBANK_DATABASE_SCRIPT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"API_VIRTUAL_SOURCE")]
        API_VIRTUAL_SOURCE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"KOUNT")]
        KOUNT = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYPAL_ADAPTIVE")]
        PAYPAL_ADAPTIVE = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"CB_POWERED_PROGRAM")]
        CB_POWERED_PROGRAM = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CLKBANK")]
        CLKBANK = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REOPENED")]
        REOPENED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TECH_SUPPORT")]
        TECH_SUPPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL")]
        CANCEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_CHANGE")]
        PRODUCT_CHANGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_LOOKUP")]
        ORDER_LOOKUP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ESCALATED")]
        ESCALATED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_IMAGE")]
        APPROVAL_IMAGE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_UPSELL")]
        APPROVAL_UPSELL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_CATEGORY_CHANGE")]
        APPROVAL_CATEGORY_CHANGE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_BLOG_POST")]
        APPROVAL_BLOG_POST = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_PRODUCT")]
        APPROVAL_PRODUCT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_ADVANCED_UPSELL")]
        APPROVAL_ADVANCED_UPSELL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_CSS_ORDERFORM")]
        APPROVAL_CSS_ORDERFORM = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_TEMPLATE_ORDERFORM")]
        APPROVAL_TEMPLATE_ORDERFORM = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_TEMPLATE_EXITOFFER")]
        APPROVAL_TEMPLATE_EXITOFFER = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_ORDER_BUMP_CUSTOM_TEXT")]
        APPROVAL_ORDER_BUMP_CUSTOM_TEXT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_EXIT_OFFER")]
        APPROVAL_EXIT_OFFER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVAL_PHOTO_ID")]
        APPROVAL_PHOTO_ID = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCT_QUESTION_ACCOUNTS")]
        ACCT_QUESTION_ACCOUNTS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCT_QUESTION_ACCOUNTING")]
        ACCT_QUESTION_ACCOUNTING = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SPAM")]
        SPAM = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT_ABUSE")]
        ACCOUNT_ABUSE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SECURITY_CONCERN")]
        SECURITY_CONCERN = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TicketTypeRequest
    {

        [System.Runtime.Serialization.EnumMember(Value = @"rfnd")]
        RFND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cncl")]
        CNCL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tech")]
        TECH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Totals
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public System.Collections.Generic.ICollection<AnalyticsValue>? Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nil")]
        NIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE")]
        SALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RFND")]
        RFND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CGBK")]
        CGBK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEE")]
        FEE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BILL")]
        BILL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_SALE")]
        TEST_SALE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_BILL")]
        TEST_BILL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_RFND")]
        TEST_RFND = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_FEE")]
        TEST_FEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VendorVariableElement
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VendorVariableElementArray
    {

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public System.Collections.Generic.ICollection<VendorVariableElement>? Item { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClickBankResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ClickBankResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClickBankResponse<TResult> : ClickBankResponse
    {
        public TResult Result { get; private set; }

        public ClickBankResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625