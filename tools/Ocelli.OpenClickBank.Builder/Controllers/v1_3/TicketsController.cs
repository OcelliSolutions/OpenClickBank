//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Ocelli.OpenClickBank.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("rest")]

    public abstract class TicketsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Find a ticket by its ID. Will return the ticket with the given ID back. If the ticket does not exist, or the user is not authorized to view the ticket - a status code of 403 will be returned.
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/{id}")]
        public abstract System.Threading.Tasks.Task GetTicket(int id);

        /// <summary>
        /// Allows the user to close a ticket, comment on a ticket, change type of a ticket, or reopen the ticket. Will return a status code 200 if the action is successful, a 403 if user is not allowed to act on the ticket or the ticket does not exist. Upon success, this will return the ticket data. Please note that closing of a ticket manually means that the ticket is cancelled. So for example closing of an open refund ticket will cancel the refund request. If the action is not specified, the assumption is that the user is trying to comment on the ticket. Also note that reopening is only supported for closed tickets and will return a 400 status code otherwise.
        /// </summary>
        /// <param name="action">The action to be taken. Supported actions are 'change', 'close' and 'reopen'.</param>
        /// <param name="comment">The comments that go along with the action, or comments on the ticket. Comments are required when reopening a ticket.</param>
        /// <param name="type">If changing the type of the ticket, this will be one of rfnd, cncl, or tech. Note: Partial refunds are not allowed when changing to a rfnd ticket type. Tickets changed to rfnd will be full refunds.</param>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/{id}")]
        public abstract System.Threading.Tasks.Task UpdateTicket(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? action = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? comment = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null);

        /// <summary>
        /// Counts the tickets matching the search criteria.
        /// </summary>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Counts a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be counted.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/count")]
        public abstract System.Threading.Tasks.Task GetTicketCount([Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? receipt = null);

        /// <summary>
        /// Searches for tickets matching the search criteria. Will return a list of ticket data objects with a status code of 200. If more than 100 results are returned, it will return a status code of 206 [Partial Content]. Users can then use the 'Page' header to determine the page needed.
        /// </summary>
        /// <param name="type">The type of the ticket. Must be either 'rfnd' / 'cncl' or 'tech'</param>
        /// <param name="status">The status of the ticket. Can be 'open', 'reopened' or 'closed'</param>
        /// <param name="receipt">Find a ticket by a given receipt. Will return the ticket(s) associated with the transaction. If the receipt is a subscription, all tickets with associated with each rebill of that subscription will be returned.  Must be 4 or more characters in length, not counting the wildcard character ('%').  May not start with the wildcard character.</param>
        /// <param name="createDateFrom">The start of the createDate range to filter tickets by. If you provide a 'createDateFrom', you must also provide a 'createDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="createDateTo">The end of the createDate range to filter tickets by. If you provide a 'createDateTo', you must also provide a 'createDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateFrom">The start of the updateDate range to filter tickets by. If you provide a 'updateDateFrom', you must also provide a 'updateDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="updateDateTo">The end of the updateDate range to filter tickets by. If you provide a 'updateDateTo', you must also provide a 'updateDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateFrom">The start of the closeDate range to filter tickets by. If you provide a 'closeDateFrom', you must also provide a 'closeDateTo' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="closeDateTo">The end of the closeDate range to filter tickets by. If you provide a 'closeDateTo', you must also provide a 'closeDateFrom' to complete the date range. The range cannot be more than 7 days in length. Dates must be in the format 'yyyy-mm-dd', i.e '2011-12-31' for December 31st, 2011.</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/list")]
        public abstract System.Threading.Tasks.Task GetTickets([Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? receipt = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? createDateFrom = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? createDateTo = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updateDateFrom = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updateDateTo = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? closeDateFrom = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? closeDateTo = null, [Microsoft.AspNetCore.Mvc.FromHeader] int? page = null);

        /// <summary>
        /// Returns amounts that would be refunded for a given refund type &amp; value.
        /// </summary>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified. Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase.</param>
        /// <param name="sku">line item sku/itemNo</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/refundAmounts/{receipt}")]
        public abstract System.Threading.Tasks.Task GetTicketRefundAmounts(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string refundType, [Microsoft.AspNetCore.Mvc.FromQuery] double refundAmount, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

        /// <summary>
        /// Acknowledges return of physical item from customer, allowing refund of transaction to complete.  This call will return a status code of 204 if successful.  The body of the response will be empty in this case.  A 403 (Forbidden) status code will be return if access is denied.  A 400 (Bad Request) will be returned if the ticket isn't found or the ticket is not for a physical purchase.
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/{id}/returned")]
        public abstract System.Threading.Tasks.Task ReturnedTicket(int id);

        /// <summary>
        /// Create a ticket with the passed in parameters. Will return the created ticket if it's successful.
        /// </summary>
        /// <param name="type">The type of the ticket. Must be either 'rfnd', 'cncl' or 'tech'. For 'rfnd' the parameter refundType must also be specified. If the receipt is for a non-recurring product, either 'rfnd' or 'cncl' will automatically refund that sale.  For any receipt of a recurring product, a 'rfnd' will refund that receipt AND cancel any future billing, while a 'cncl' will only cancel future billing without issuing any refunds.</param>
        /// <param name="reason">The reason associated with the ticket. A ticket reason should be one of the following based on type: CNCLticket.type.cancel.1 (I did not receive additional value for the recurring payments).ticket.type.cancel.2 (I was not satisfied with the subscription / Subscription did not meet expectations) ticket.type.cancel.3 (I was unable to get support from the vendor) ticket.type.cancel.4 (Product was not compatible with my computer) ticket.type.cancel.5 (I am unable to afford continuing payments for this subscription) ticket.type.cancel.6 (I did not realize that I accepted the terms for continuing payments) ticket.type.cancel.7 (Other) ticket.type.cancel.not.mobile (Product was not compatible with my mobile device.) RFNDticket.type.refund.1 (I never received my product) ticket.type.refund.2 (I was not satisfied with the product. / Product did not meet expectations) ticket.type.refund.3 (Product was not compatible with my computer) ticket.type.refund.4 (I was unable to get technical support) ticket.type.refund.5 (I did not authorize the purchase) ticket.type.refund.6 (I do not recognize the purchase) ticket.type.refund.7 (Duplicate purchase. / Or already purchased product previously) ticket.type.refund.returned (Product returned) ticket.type.refund.8 (Other) ticket.type.refund.not.mobile (Product was not compatible with my mobile device.) TECHticket.type.tech_support.1 (I am unable to log in.) ticket.type.tech_support.2 (I had problems downloading the product.) ticket.type.tech_support.3 (I never received a valid registration code, please send a valid code.) ticket.type.tech_support.4 (I can't get the product to work.) ticket.type.tech_support.9 (Other)ticket.type.tech_support.10 (I never received my product.)</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        /// <param name="comment">The comments associated with creating a ticket.</param>
        /// <param name="refundType">The type of refund. Supported values include 'FULL', 'PARTIAL_PERCENT', 'PARTIAL_AMOUNT' (case sensitive). For 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT' the parameter refundAmount must be specified.  Additionally the vendor associated with the transaction must be enabled for partial refunds in order to use both 'PARTIAL_PERCENT' and 'PARTIAL_AMOUNT', if vendor is not enabled and one of the partial options is specified a 403 will be returned.</param>
        /// <param name="refundAmount">Specified for partial refunds indicating the amount of the transaction to be refunded. For 'PARTIAL_PERCENT' this must be a number between 1 and 80, with no more than two digits of precision - for example 50.00. For 'PARTIAL_AMOUNT' this is the amount to refund in the currency the customer used during the purchase. The resource /1.3/tickets/refundAmounts may be used to retrieve what amounts in the customers currency convert to.</param>
        /// <param name="retainSubscription">Specifies if the subscription should be retained after the refund has been processed</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/tickets/{receipt}")]
        public abstract System.Threading.Tasks.Task CreateTicket(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string type, [Microsoft.AspNetCore.Mvc.FromQuery] string reason, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? comment = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? refundType = null, [Microsoft.AspNetCore.Mvc.FromQuery] double? refundAmount = null, [Microsoft.AspNetCore.Mvc.FromQuery] bool? retainSubscription = null);

    }

    


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625