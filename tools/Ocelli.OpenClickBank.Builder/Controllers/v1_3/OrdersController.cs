//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Ocelli.OpenClickBank.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("rest")]

    public abstract class OrdersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Returns a list of order detail objects which match the given receipt.
        /// </summary>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}")]
        public abstract System.Threading.Tasks.Task GetOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

        /// <summary>
        /// This head request is used to identify if a particular order or a subscription is active, i.e. it has not been refunded, chargebacked or cancelled. It will return a 403 (Forbidden) if that's the case, or a 204 if the order is still active. Note that it will also return a 403 if the order is not found, or the user does not have access to that receipt.
        /// </summary>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        [Microsoft.AspNetCore.Mvc.HttpHead, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}")]
        public abstract System.Threading.Tasks.Task GetOrderStatus(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

        /// <summary>
        /// Returns all the upsell transactions for the given parent upsell transaction.
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/upsells")]
        public abstract System.Threading.Tasks.Task GetOrderUpsells(string receipt);

        /// <summary>
        /// Same as the list command, except that this one returns the count of the orders returned based on the search criteria.
        /// </summary>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd)</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd)</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND / TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/orders/count")]
        public abstract System.Threading.Tasks.Task GetOrderCount([Microsoft.AspNetCore.Mvc.FromQuery] DateTime? startDate = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? endDate = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? vendor = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? affiliate = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastName = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? email = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? tid = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? role = null);

        /// <summary>
        /// List orders for the authenticated user scoped to the search criteria. Only the first 100 orders will be returned.&amp;nbsp;This method supports pagination, so if the second page of the next 100 items is required a request header 'Page' with value 2 will return them.
        /// </summary>
        /// <param name="startDate">The beginning date for the search (yyyy-mm-dd).  If a startDate is specified, you must also specify an endDate.</param>
        /// <param name="endDate">The end date for the search (yyyy-mm-dd). If an endDate is specified, you must also specify a startDate.</param>
        /// <param name="type">The type of transactions to be returned. Supported types are [SALE / RFND / CGBK / FEE / BILL / TEST_SALE / TEST_BILL / TEST_RFND /TEST_FEE]. If not specified all types will be returned. If an invalid type is specified, no transactions will be returned.</param>
        /// <param name="vendor">The vendor name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="affiliate">The affiliate name. Supports the word 'none' to search for transactions without affiliates, and wildcard searches using the '%' character. (Wilcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="lastName">Customers last name. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="item">The item number of the order</param>
        /// <param name="email">The email of the customer. Supports wildcard searches using the '%' character. (Wildcards are converted to %25 after url encoding is done by the client)</param>
        /// <param name="tid">The TID (Tracking ID / Promo Code) to search on.  This will search both vendor and affiliate tracking codes and be returned in the promo field</param>
        /// <param name="role">Role account was of transaction options are [VENDOR, AFFILIATE]</param>
        /// <param name="postalCode">Customer's zip or postal code. Supports wildcard searches.</param>
        /// <param name="amount">The transaction total amount</param>
        /// <param name="page">Page Number. Results only return 100 records at a time</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("1.3/orders/list")]
        public abstract System.Threading.Tasks.Task GetOrders([Microsoft.AspNetCore.Mvc.FromQuery] DateTime? startDate = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? endDate = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? vendor = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? affiliate = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastName = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? item = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? email = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? tid = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? role = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? postalCode = null, [Microsoft.AspNetCore.Mvc.FromQuery] double? amount = null, [Microsoft.AspNetCore.Mvc.FromHeader] int? page = null);

        /// <summary>
        /// Allows a vendor to change shipping address of a physical recurring subscription.
        /// </summary>
        /// <param name="address1">Updated address (line 1).</param>
        /// <param name="city">Updated city.</param>
        /// <param name="countryCode">Updated country code.</param>
        /// <param name="firstName">Updated customer first name.</param>
        /// <param name="lastName">Updated customer last name.</param>
        /// <param name="address2">Updated address (line 2).</param>
        /// <param name="county">Updated county.</param>
        /// <param name="province">Updated state or province.</param>
        /// <param name="postalCode">Updated postal code or Zip.</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/changeAddress")]
        public abstract System.Threading.Tasks.Task ChangeAddressOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string address1, [Microsoft.AspNetCore.Mvc.FromQuery] string city, [Microsoft.AspNetCore.Mvc.FromQuery] string countryCode, [Microsoft.AspNetCore.Mvc.FromQuery] string? firstName = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastName = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? address2 = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? county = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? province = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? postalCode = null);

        /// <summary>
        /// *BETA* Allows a vendor to change (upgrade or downgrade) the product associated with a subscription.
        /// </summary>
        /// <param name="oldSku">The SKU of the current product for the subscription.</param>
        /// <param name="newSku">The SKU of the new product for the subscription.</param>
        /// <param name="carryAffiliate">Determines if the affiliate from the original transaction is carried over to the new subscription.</param>
        /// <param name="applyProratedRefundQuery">Determines if the prorated refund should be applied on the product change. This parameter will default to TRUE if not explicitly set</param>
        /// <param name="nextRebillDate">Allows the vendor to change the date of the next rebill. Date Format is YYYY-MM-DD. Not passing in any value will set the next rebill date to the next day of product change</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/changeProduct")]
        public abstract System.Threading.Tasks.Task ChangeProductOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string oldSku, [Microsoft.AspNetCore.Mvc.FromQuery] string newSku, [Microsoft.AspNetCore.Mvc.FromQuery] bool? carryAffiliate = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "applyProratedRefund")] bool? applyProratedRefundQuery = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? nextRebillDate = null);

        /// <summary>
        /// *BETA* Allows a vendor to extend a subscription by a given number of rebill periods
        /// </summary>
        /// <param name="numPeriods">The number of periods to extend the subscription by</param>
        /// <param name="sku">sku/itemNo of the line item. Used to identify individual purchase in multi-item cart purchase</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/extend")]
        public abstract System.Threading.Tasks.Task ExtendOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] int numPeriods, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

        /// <summary>
        /// *BETA* Allows a vendor to change the rebill date of a subscription
        /// </summary>
        /// <param name="restartDate">The date when the subscription will be resumed in format yyyy-mm-dd</param>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/pause")]
        public abstract System.Threading.Tasks.Task PauseOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime restartDate, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

        /// <summary>
        /// *BETA* Allows a vendor to restart a cancelled subscription
        /// </summary>
        /// <param name="sku">The item number of the subscription product that should be reinstated for the order</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("1.3/orders/{receipt}/reinstate")]
        public abstract System.Threading.Tasks.Task ReinstateOrder(string receipt, [Microsoft.AspNetCore.Mvc.FromQuery] string? sku = null);

    }

    


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625